# >======| The Brain Of the Cat |=====< #

# desire
import is_desiring?: "res://assets/scripts/cat/bt_actions/is_desiring.gd"
import can_fullfill?: "res://assets/scripts/cat/bt_actions/can_fullfill.gd"
import find_desire_feeder: "res://assets/scripts/cat/bt_actions/find_desire_feeder.gd"
import interact: "res://assets/scripts/cat/bt_actions/interact.gd"

# common
import find_random_point: "res://assets/scripts/cat/bt_actions/find_random_point.gd"
import go_to_target: "res://assets/scripts/cat/bt_actions/go_to_target.gd"
import miao: "res://assets/scripts/cat/bt_actions/miao.gd"
import miao_msg: "res://assets/scripts/cat/bt_actions/miao_msg.gd"

subtree name: go_to_somewhere
	sequence
		find_random_point # 随机选一个地点
		go_to_target # 走到那个地点

subtree name: wander
	sequence
		$go_to_somewhere # 随机去一个地点
		random_timer min_wait: 0.5 max_wait: 1.5 # 静止若干秒

subtree name: find_feeder_to_interact
	selector
		sequence # 找到提供器，并一直消耗里面的资源
			miao_msg type: "GoToFeeder"
			find_desire_feeder
			go_to_target
			can_fullfill?
			always_succeed # 一直消耗资源，直到饱了或者资源没了
				until_fail
					sequence
						interact
						timer wait: 0.5
						can_fullfill?
			miao_msg hide: true
		
		parallel policy: SEQUENCE orchestrator: RESUME # 如果提供器里没有资源，但没有满足需求，就乱走，并大叫
			miao type: "FeederIsEmpty" # 叫
			$wander
			invert
				sequence
					find_desire_feeder set_target: false
					timer wait: 0.5

tree
	selector
		(is_desiring?) $find_feeder_to_interact # 寻找提供器
		parallel # 如果 is_desiring为真则结束这个并行执行节点
			$wander
			invert
				is_desiring?


